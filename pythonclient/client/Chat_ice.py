# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `Chat.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__

# Start of module Chat
_M_Chat = Ice.openModule('Chat')
__name__ = 'Chat'

if not _M_Chat.__dict__.has_key('UserAlreadyInRoomException'):
    _M_Chat.UserAlreadyInRoomException = Ice.createTempClass()
    class UserAlreadyInRoomException(Ice.UserException):
        def __init__(self, description=''):
            self.description = description

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Chat::UserAlreadyInRoomException'

    _M_Chat._t_UserAlreadyInRoomException = IcePy.defineException('::Chat::UserAlreadyInRoomException', UserAlreadyInRoomException, (), None, (('description', (), IcePy._t_string),))
    UserAlreadyInRoomException._ice_type = _M_Chat._t_UserAlreadyInRoomException

    _M_Chat.UserAlreadyInRoomException = UserAlreadyInRoomException
    del UserAlreadyInRoomException

if not _M_Chat.__dict__.has_key('UserIsNotInRoomException'):
    _M_Chat.UserIsNotInRoomException = Ice.createTempClass()
    class UserIsNotInRoomException(Ice.UserException):
        def __init__(self, description=''):
            self.description = description

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Chat::UserIsNotInRoomException'

    _M_Chat._t_UserIsNotInRoomException = IcePy.defineException('::Chat::UserIsNotInRoomException', UserIsNotInRoomException, (), None, (('description', (), IcePy._t_string),))
    UserIsNotInRoomException._ice_type = _M_Chat._t_UserIsNotInRoomException

    _M_Chat.UserIsNotInRoomException = UserIsNotInRoomException
    del UserIsNotInRoomException

if not _M_Chat.__dict__.has_key('UserAlreadyExistException'):
    _M_Chat.UserAlreadyExistException = Ice.createTempClass()
    class UserAlreadyExistException(Ice.UserException):
        def __init__(self, description=''):
            self.description = description

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Chat::UserAlreadyExistException'

    _M_Chat._t_UserAlreadyExistException = IcePy.defineException('::Chat::UserAlreadyExistException', UserAlreadyExistException, (), None, (('description', (), IcePy._t_string),))
    UserAlreadyExistException._ice_type = _M_Chat._t_UserAlreadyExistException

    _M_Chat.UserAlreadyExistException = UserAlreadyExistException
    del UserAlreadyExistException

if not _M_Chat.__dict__.has_key('UserNotExistException'):
    _M_Chat.UserNotExistException = Ice.createTempClass()
    class UserNotExistException(Ice.UserException):
        def __init__(self, description=''):
            self.description = description

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Chat::UserNotExistException'

    _M_Chat._t_UserNotExistException = IcePy.defineException('::Chat::UserNotExistException', UserNotExistException, (), None, (('description', (), IcePy._t_string),))
    UserNotExistException._ice_type = _M_Chat._t_UserNotExistException

    _M_Chat.UserNotExistException = UserNotExistException
    del UserNotExistException

if not _M_Chat.__dict__.has_key('IncorrectPasswordException'):
    _M_Chat.IncorrectPasswordException = Ice.createTempClass()
    class IncorrectPasswordException(Ice.UserException):
        def __init__(self, description=''):
            self.description = description

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Chat::IncorrectPasswordException'

    _M_Chat._t_IncorrectPasswordException = IcePy.defineException('::Chat::IncorrectPasswordException', IncorrectPasswordException, (), None, (('description', (), IcePy._t_string),))
    IncorrectPasswordException._ice_type = _M_Chat._t_IncorrectPasswordException

    _M_Chat.IncorrectPasswordException = IncorrectPasswordException
    del IncorrectPasswordException

if not _M_Chat.__dict__.has_key('RoomAlreadyExistException'):
    _M_Chat.RoomAlreadyExistException = Ice.createTempClass()
    class RoomAlreadyExistException(Ice.UserException):
        def __init__(self, description=''):
            self.description = description

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Chat::RoomAlreadyExistException'

    _M_Chat._t_RoomAlreadyExistException = IcePy.defineException('::Chat::RoomAlreadyExistException', RoomAlreadyExistException, (), None, (('description', (), IcePy._t_string),))
    RoomAlreadyExistException._ice_type = _M_Chat._t_RoomAlreadyExistException

    _M_Chat.RoomAlreadyExistException = RoomAlreadyExistException
    del RoomAlreadyExistException

if not _M_Chat.__dict__.has_key('RoomNotFoundException'):
    _M_Chat.RoomNotFoundException = Ice.createTempClass()
    class RoomNotFoundException(Ice.UserException):
        def __init__(self, description=''):
            self.description = description

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Chat::RoomNotFoundException'

    _M_Chat._t_RoomNotFoundException = IcePy.defineException('::Chat::RoomNotFoundException', RoomNotFoundException, (), None, (('description', (), IcePy._t_string),))
    RoomNotFoundException._ice_type = _M_Chat._t_RoomNotFoundException

    _M_Chat.RoomNotFoundException = RoomNotFoundException
    del RoomNotFoundException

if not _M_Chat.__dict__.has_key('UserAlreadyLoggedInException'):
    _M_Chat.UserAlreadyLoggedInException = Ice.createTempClass()
    class UserAlreadyLoggedInException(Ice.UserException):
        def __init__(self, description=''):
            self.description = description

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Chat::UserAlreadyLoggedInException'

    _M_Chat._t_UserAlreadyLoggedInException = IcePy.defineException('::Chat::UserAlreadyLoggedInException', UserAlreadyLoggedInException, (), None, (('description', (), IcePy._t_string),))
    UserAlreadyLoggedInException._ice_type = _M_Chat._t_UserAlreadyLoggedInException

    _M_Chat.UserAlreadyLoggedInException = UserAlreadyLoggedInException
    del UserAlreadyLoggedInException

if not _M_Chat.__dict__.has_key('UserNotLoggedInException'):
    _M_Chat.UserNotLoggedInException = Ice.createTempClass()
    class UserNotLoggedInException(Ice.UserException):
        def __init__(self, description=''):
            self.description = description

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Chat::UserNotLoggedInException'

    _M_Chat._t_UserNotLoggedInException = IcePy.defineException('::Chat::UserNotLoggedInException', UserNotLoggedInException, (), None, (('description', (), IcePy._t_string),))
    UserNotLoggedInException._ice_type = _M_Chat._t_UserNotLoggedInException

    _M_Chat.UserNotLoggedInException = UserNotLoggedInException
    del UserNotLoggedInException

if not _M_Chat.__dict__.has_key('Message'):
    _M_Chat.Message = Ice.createTempClass()
    class Message(Ice.Object):
        def __init__(self, user='', msg=''):
            self.user = user
            self.msg = msg

        def ice_ids(self, current=None):
            return ('::Chat::Message', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Chat::Message'

        def ice_staticId():
            return '::Chat::Message'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Chat._t_Message)

        __repr__ = __str__

    _M_Chat.MessagePrx = Ice.createTempClass()
    class MessagePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Chat.MessagePrx.ice_checkedCast(proxy, '::Chat::Message', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Chat.MessagePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Chat._t_MessagePrx = IcePy.defineProxy('::Chat::Message', MessagePrx)

    _M_Chat._t_Message = IcePy.defineClass('::Chat::Message', Message, (), False, None, (), (
        ('user', (), IcePy._t_string),
        ('msg', (), IcePy._t_string)
    ))
    Message._ice_type = _M_Chat._t_Message

    _M_Chat.Message = Message
    del Message

    _M_Chat.MessagePrx = MessagePrx
    del MessagePrx

if not _M_Chat.__dict__.has_key('ClientCallback'):
    _M_Chat.ClientCallback = Ice.createTempClass()
    class ClientCallback(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_Chat.ClientCallback:
                raise RuntimeError('Chat.ClientCallback is an abstract class')

        def ice_ids(self, current=None):
            return ('::Chat::ClientCallback', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Chat::ClientCallback'

        def ice_staticId():
            return '::Chat::ClientCallback'
        ice_staticId = staticmethod(ice_staticId)

        def stateDidChange(self, change, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Chat._t_ClientCallback)

        __repr__ = __str__

    _M_Chat.ClientCallbackPrx = Ice.createTempClass()
    class ClientCallbackPrx(Ice.ObjectPrx):

        def stateDidChange(self, change, _ctx=None):
            return _M_Chat.ClientCallback._op_stateDidChange.invoke(self, ((change, ), _ctx))

        def begin_stateDidChange(self, change, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Chat.ClientCallback._op_stateDidChange.begin(self, ((change, ), _response, _ex, _sent, _ctx))

        def end_stateDidChange(self, _r):
            return _M_Chat.ClientCallback._op_stateDidChange.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Chat.ClientCallbackPrx.ice_checkedCast(proxy, '::Chat::ClientCallback', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Chat.ClientCallbackPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Chat._t_ClientCallbackPrx = IcePy.defineProxy('::Chat::ClientCallback', ClientCallbackPrx)

    _M_Chat._t_ClientCallback = IcePy.defineClass('::Chat::ClientCallback', ClientCallback, (), True, None, (), ())
    ClientCallback._ice_type = _M_Chat._t_ClientCallback

    ClientCallback._op_stateDidChange = IcePy.Operation('stateDidChange', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_Chat._t_Message),), (), None, ())

    _M_Chat.ClientCallback = ClientCallback
    del ClientCallback

    _M_Chat.ClientCallbackPrx = ClientCallbackPrx
    del ClientCallbackPrx

if not _M_Chat.__dict__.has_key('_t_Messages'):
    _M_Chat._t_Messages = IcePy.defineSequence('::Chat::Messages', (), _M_Chat._t_Message)

if not _M_Chat.__dict__.has_key('Room'):
    _M_Chat.Room = Ice.createTempClass()
    class Room(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_Chat.Room:
                raise RuntimeError('Chat.Room is an abstract class')

        def ice_ids(self, current=None):
            return ('::Chat::Room', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Chat::Room'

        def ice_staticId():
            return '::Chat::Room'
        ice_staticId = staticmethod(ice_staticId)

        def getHistory(self, current=None):
            pass

        def send(self, message, current=None):
            pass

        def join(self, roomName, callback, current=None):
            pass

        def leave(self, roomName, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Chat._t_Room)

        __repr__ = __str__

    _M_Chat.RoomPrx = Ice.createTempClass()
    class RoomPrx(Ice.ObjectPrx):

        def getHistory(self, _ctx=None):
            return _M_Chat.Room._op_getHistory.invoke(self, ((), _ctx))

        def begin_getHistory(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Chat.Room._op_getHistory.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getHistory(self, _r):
            return _M_Chat.Room._op_getHistory.end(self, _r)

        def send(self, message, _ctx=None):
            return _M_Chat.Room._op_send.invoke(self, ((message, ), _ctx))

        def begin_send(self, message, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Chat.Room._op_send.begin(self, ((message, ), _response, _ex, _sent, _ctx))

        def end_send(self, _r):
            return _M_Chat.Room._op_send.end(self, _r)

        def join(self, roomName, callback, _ctx=None):
            return _M_Chat.Room._op_join.invoke(self, ((roomName, callback), _ctx))

        def begin_join(self, roomName, callback, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Chat.Room._op_join.begin(self, ((roomName, callback), _response, _ex, _sent, _ctx))

        def end_join(self, _r):
            return _M_Chat.Room._op_join.end(self, _r)

        def leave(self, roomName, _ctx=None):
            return _M_Chat.Room._op_leave.invoke(self, ((roomName, ), _ctx))

        def begin_leave(self, roomName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Chat.Room._op_leave.begin(self, ((roomName, ), _response, _ex, _sent, _ctx))

        def end_leave(self, _r):
            return _M_Chat.Room._op_leave.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Chat.RoomPrx.ice_checkedCast(proxy, '::Chat::Room', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Chat.RoomPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Chat._t_RoomPrx = IcePy.defineProxy('::Chat::Room', RoomPrx)

    _M_Chat._t_Room = IcePy.defineClass('::Chat::Room', Room, (), True, None, (), ())
    Room._ice_type = _M_Chat._t_Room

    Room._op_getHistory = IcePy.Operation('getHistory', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_Chat._t_Messages, (_M_Chat._t_UserIsNotInRoomException,))
    Room._op_send = IcePy.Operation('send', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), IcePy._t_bool, (_M_Chat._t_UserIsNotInRoomException,))
    Room._op_join = IcePy.Operation('join', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), _M_Chat._t_ClientCallbackPrx)), (), IcePy._t_bool, (_M_Chat._t_UserAlreadyInRoomException, _M_Chat._t_RoomNotFoundException))
    Room._op_leave = IcePy.Operation('leave', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), IcePy._t_bool, (_M_Chat._t_UserIsNotInRoomException, _M_Chat._t_RoomNotFoundException))

    _M_Chat.Room = Room
    del Room

    _M_Chat.RoomPrx = RoomPrx
    del RoomPrx

if not _M_Chat.__dict__.has_key('_t_Rooms'):
    _M_Chat._t_Rooms = IcePy.defineSequence('::Chat::Rooms', (), IcePy._t_string)

if not _M_Chat.__dict__.has_key('Manager'):
    _M_Chat.Manager = Ice.createTempClass()
    class Manager(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_Chat.Manager:
                raise RuntimeError('Chat.Manager is an abstract class')

        def ice_ids(self, current=None):
            return ('::Chat::Manager', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Chat::Manager'

        def ice_staticId():
            return '::Chat::Manager'
        ice_staticId = staticmethod(ice_staticId)

        def getRooms(self, current=None):
            pass

        def register(self, nick, password, current=None):
            pass

        def login(self, nick, password, current=None):
            pass

        def logout(self, nick, current=None):
            pass

        def createRoom(self, roomName, current=None):
            pass

        def removeRoom(self, roomName, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Chat._t_Manager)

        __repr__ = __str__

    _M_Chat.ManagerPrx = Ice.createTempClass()
    class ManagerPrx(Ice.ObjectPrx):

        def getRooms(self, _ctx=None):
            return _M_Chat.Manager._op_getRooms.invoke(self, ((), _ctx))

        def begin_getRooms(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Chat.Manager._op_getRooms.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getRooms(self, _r):
            return _M_Chat.Manager._op_getRooms.end(self, _r)

        def register(self, nick, password, _ctx=None):
            return _M_Chat.Manager._op_register.invoke(self, ((nick, password), _ctx))

        def begin_register(self, nick, password, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Chat.Manager._op_register.begin(self, ((nick, password), _response, _ex, _sent, _ctx))

        def end_register(self, _r):
            return _M_Chat.Manager._op_register.end(self, _r)

        def login(self, nick, password, _ctx=None):
            return _M_Chat.Manager._op_login.invoke(self, ((nick, password), _ctx))

        def begin_login(self, nick, password, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Chat.Manager._op_login.begin(self, ((nick, password), _response, _ex, _sent, _ctx))

        def end_login(self, _r):
            return _M_Chat.Manager._op_login.end(self, _r)

        def logout(self, nick, _ctx=None):
            return _M_Chat.Manager._op_logout.invoke(self, ((nick, ), _ctx))

        def begin_logout(self, nick, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Chat.Manager._op_logout.begin(self, ((nick, ), _response, _ex, _sent, _ctx))

        def end_logout(self, _r):
            return _M_Chat.Manager._op_logout.end(self, _r)

        def createRoom(self, roomName, _ctx=None):
            return _M_Chat.Manager._op_createRoom.invoke(self, ((roomName, ), _ctx))

        def begin_createRoom(self, roomName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Chat.Manager._op_createRoom.begin(self, ((roomName, ), _response, _ex, _sent, _ctx))

        def end_createRoom(self, _r):
            return _M_Chat.Manager._op_createRoom.end(self, _r)

        def removeRoom(self, roomName, _ctx=None):
            return _M_Chat.Manager._op_removeRoom.invoke(self, ((roomName, ), _ctx))

        def begin_removeRoom(self, roomName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Chat.Manager._op_removeRoom.begin(self, ((roomName, ), _response, _ex, _sent, _ctx))

        def end_removeRoom(self, _r):
            return _M_Chat.Manager._op_removeRoom.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Chat.ManagerPrx.ice_checkedCast(proxy, '::Chat::Manager', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Chat.ManagerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Chat._t_ManagerPrx = IcePy.defineProxy('::Chat::Manager', ManagerPrx)

    _M_Chat._t_Manager = IcePy.defineClass('::Chat::Manager', Manager, (), True, None, (), ())
    Manager._ice_type = _M_Chat._t_Manager

    Manager._op_getRooms = IcePy.Operation('getRooms', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_Chat._t_Rooms, ())
    Manager._op_register = IcePy.Operation('register', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), IcePy._t_string)), (), IcePy._t_bool, (_M_Chat._t_UserAlreadyExistException,))
    Manager._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), IcePy._t_string)), (), IcePy._t_bool, (_M_Chat._t_UserAlreadyLoggedInException, _M_Chat._t_IncorrectPasswordException, _M_Chat._t_UserNotExistException))
    Manager._op_logout = IcePy.Operation('logout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), IcePy._t_bool, (_M_Chat._t_UserNotLoggedInException,))
    Manager._op_createRoom = IcePy.Operation('createRoom', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), IcePy._t_bool, (_M_Chat._t_RoomAlreadyExistException,))
    Manager._op_removeRoom = IcePy.Operation('removeRoom', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), IcePy._t_bool, (_M_Chat._t_RoomNotFoundException,))

    _M_Chat.Manager = Manager
    del Manager

    _M_Chat.ManagerPrx = ManagerPrx
    del ManagerPrx

# End of module Chat
