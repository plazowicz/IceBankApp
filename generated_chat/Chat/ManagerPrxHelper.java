// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ManagerPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Chat;

public final class ManagerPrxHelper extends Ice.ObjectPrxHelperBase implements ManagerPrx
{
    public boolean
    createRoom(String roomName)
        throws RoomAlreadyExistException
    {
        return createRoom(roomName, null, false);
    }

    public boolean
    createRoom(String roomName, java.util.Map<String, String> __ctx)
        throws RoomAlreadyExistException
    {
        return createRoom(roomName, __ctx, true);
    }

    private boolean
    createRoom(String roomName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RoomAlreadyExistException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("createRoom");
                __delBase = __getDelegate(false);
                _ManagerDel __del = (_ManagerDel)__delBase;
                return __del.createRoom(roomName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __createRoom_name = "createRoom";

    public Ice.AsyncResult begin_createRoom(String roomName)
    {
        return begin_createRoom(roomName, null, false, null);
    }

    public Ice.AsyncResult begin_createRoom(String roomName, java.util.Map<String, String> __ctx)
    {
        return begin_createRoom(roomName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_createRoom(String roomName, Ice.Callback __cb)
    {
        return begin_createRoom(roomName, null, false, __cb);
    }

    public Ice.AsyncResult begin_createRoom(String roomName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createRoom(roomName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_createRoom(String roomName, Callback_Manager_createRoom __cb)
    {
        return begin_createRoom(roomName, null, false, __cb);
    }

    public Ice.AsyncResult begin_createRoom(String roomName, java.util.Map<String, String> __ctx, Callback_Manager_createRoom __cb)
    {
        return begin_createRoom(roomName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_createRoom(String roomName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createRoom_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __createRoom_name, __cb);
        try
        {
            __result.__prepare(__createRoom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(roomName);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_createRoom(Ice.AsyncResult __result)
        throws RoomAlreadyExistException
    {
        Ice.AsyncResult.__check(__result, this, __createRoom_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(RoomAlreadyExistException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public String[]
    getRooms()
    {
        return getRooms(null, false);
    }

    public String[]
    getRooms(java.util.Map<String, String> __ctx)
    {
        return getRooms(__ctx, true);
    }

    private String[]
    getRooms(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getRooms");
                __delBase = __getDelegate(false);
                _ManagerDel __del = (_ManagerDel)__delBase;
                return __del.getRooms(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getRooms_name = "getRooms";

    public Ice.AsyncResult begin_getRooms()
    {
        return begin_getRooms(null, false, null);
    }

    public Ice.AsyncResult begin_getRooms(java.util.Map<String, String> __ctx)
    {
        return begin_getRooms(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getRooms(Ice.Callback __cb)
    {
        return begin_getRooms(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRooms(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRooms(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRooms(Callback_Manager_getRooms __cb)
    {
        return begin_getRooms(null, false, __cb);
    }

    public Ice.AsyncResult begin_getRooms(java.util.Map<String, String> __ctx, Callback_Manager_getRooms __cb)
    {
        return begin_getRooms(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRooms(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRooms_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRooms_name, __cb);
        try
        {
            __result.__prepare(__getRooms_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getRooms(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getRooms_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = RoomsHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    login(String nick, String password)
        throws IncorrectPasswordException,
               UserAlreadyLoggedInException,
               UserNotExistException
    {
        return login(nick, password, null, false);
    }

    public boolean
    login(String nick, String password, java.util.Map<String, String> __ctx)
        throws IncorrectPasswordException,
               UserAlreadyLoggedInException,
               UserNotExistException
    {
        return login(nick, password, __ctx, true);
    }

    private boolean
    login(String nick, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws IncorrectPasswordException,
               UserAlreadyLoggedInException,
               UserNotExistException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("login");
                __delBase = __getDelegate(false);
                _ManagerDel __del = (_ManagerDel)__delBase;
                return __del.login(nick, password, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __login_name = "login";

    public Ice.AsyncResult begin_login(String nick, String password)
    {
        return begin_login(nick, password, null, false, null);
    }

    public Ice.AsyncResult begin_login(String nick, String password, java.util.Map<String, String> __ctx)
    {
        return begin_login(nick, password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_login(String nick, String password, Ice.Callback __cb)
    {
        return begin_login(nick, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_login(String nick, String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_login(nick, password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_login(String nick, String password, Callback_Manager_login __cb)
    {
        return begin_login(nick, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_login(String nick, String password, java.util.Map<String, String> __ctx, Callback_Manager_login __cb)
    {
        return begin_login(nick, password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_login(String nick, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__login_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __login_name, __cb);
        try
        {
            __result.__prepare(__login_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(nick);
            __os.writeString(password);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_login(Ice.AsyncResult __result)
        throws IncorrectPasswordException,
               UserAlreadyLoggedInException,
               UserNotExistException
    {
        Ice.AsyncResult.__check(__result, this, __login_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(IncorrectPasswordException __ex)
            {
                throw __ex;
            }
            catch(UserAlreadyLoggedInException __ex)
            {
                throw __ex;
            }
            catch(UserNotExistException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    logout(String nick)
        throws UserNotLoggedInException
    {
        return logout(nick, null, false);
    }

    public boolean
    logout(String nick, java.util.Map<String, String> __ctx)
        throws UserNotLoggedInException
    {
        return logout(nick, __ctx, true);
    }

    private boolean
    logout(String nick, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UserNotLoggedInException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("logout");
                __delBase = __getDelegate(false);
                _ManagerDel __del = (_ManagerDel)__delBase;
                return __del.logout(nick, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __logout_name = "logout";

    public Ice.AsyncResult begin_logout(String nick)
    {
        return begin_logout(nick, null, false, null);
    }

    public Ice.AsyncResult begin_logout(String nick, java.util.Map<String, String> __ctx)
    {
        return begin_logout(nick, __ctx, true, null);
    }

    public Ice.AsyncResult begin_logout(String nick, Ice.Callback __cb)
    {
        return begin_logout(nick, null, false, __cb);
    }

    public Ice.AsyncResult begin_logout(String nick, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_logout(nick, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_logout(String nick, Callback_Manager_logout __cb)
    {
        return begin_logout(nick, null, false, __cb);
    }

    public Ice.AsyncResult begin_logout(String nick, java.util.Map<String, String> __ctx, Callback_Manager_logout __cb)
    {
        return begin_logout(nick, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_logout(String nick, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__logout_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __logout_name, __cb);
        try
        {
            __result.__prepare(__logout_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(nick);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_logout(Ice.AsyncResult __result)
        throws UserNotLoggedInException
    {
        Ice.AsyncResult.__check(__result, this, __logout_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(UserNotLoggedInException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    register(String nick, String password)
        throws UserAlreadyExistException
    {
        return register(nick, password, null, false);
    }

    public boolean
    register(String nick, String password, java.util.Map<String, String> __ctx)
        throws UserAlreadyExistException
    {
        return register(nick, password, __ctx, true);
    }

    private boolean
    register(String nick, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UserAlreadyExistException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("register");
                __delBase = __getDelegate(false);
                _ManagerDel __del = (_ManagerDel)__delBase;
                return __del.register(nick, password, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __register_name = "register";

    public Ice.AsyncResult begin_register(String nick, String password)
    {
        return begin_register(nick, password, null, false, null);
    }

    public Ice.AsyncResult begin_register(String nick, String password, java.util.Map<String, String> __ctx)
    {
        return begin_register(nick, password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_register(String nick, String password, Ice.Callback __cb)
    {
        return begin_register(nick, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_register(String nick, String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_register(nick, password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_register(String nick, String password, Callback_Manager_register __cb)
    {
        return begin_register(nick, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_register(String nick, String password, java.util.Map<String, String> __ctx, Callback_Manager_register __cb)
    {
        return begin_register(nick, password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_register(String nick, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__register_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __register_name, __cb);
        try
        {
            __result.__prepare(__register_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(nick);
            __os.writeString(password);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_register(Ice.AsyncResult __result)
        throws UserAlreadyExistException
    {
        Ice.AsyncResult.__check(__result, this, __register_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(UserAlreadyExistException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    removeRoom(String roomName)
        throws RoomNotFoundException
    {
        return removeRoom(roomName, null, false);
    }

    public boolean
    removeRoom(String roomName, java.util.Map<String, String> __ctx)
        throws RoomNotFoundException
    {
        return removeRoom(roomName, __ctx, true);
    }

    private boolean
    removeRoom(String roomName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RoomNotFoundException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("removeRoom");
                __delBase = __getDelegate(false);
                _ManagerDel __del = (_ManagerDel)__delBase;
                return __del.removeRoom(roomName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __removeRoom_name = "removeRoom";

    public Ice.AsyncResult begin_removeRoom(String roomName)
    {
        return begin_removeRoom(roomName, null, false, null);
    }

    public Ice.AsyncResult begin_removeRoom(String roomName, java.util.Map<String, String> __ctx)
    {
        return begin_removeRoom(roomName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeRoom(String roomName, Ice.Callback __cb)
    {
        return begin_removeRoom(roomName, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeRoom(String roomName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeRoom(roomName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeRoom(String roomName, Callback_Manager_removeRoom __cb)
    {
        return begin_removeRoom(roomName, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeRoom(String roomName, java.util.Map<String, String> __ctx, Callback_Manager_removeRoom __cb)
    {
        return begin_removeRoom(roomName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeRoom(String roomName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeRoom_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeRoom_name, __cb);
        try
        {
            __result.__prepare(__removeRoom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(roomName);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_removeRoom(Ice.AsyncResult __result)
        throws RoomNotFoundException
    {
        Ice.AsyncResult.__check(__result, this, __removeRoom_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(RoomNotFoundException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public static ManagerPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        ManagerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ManagerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ManagerPrxHelper __h = new ManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ManagerPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ManagerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ManagerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ManagerPrxHelper __h = new ManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ManagerPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ManagerPrxHelper __h = new ManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ManagerPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ManagerPrxHelper __h = new ManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ManagerPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        ManagerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ManagerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                ManagerPrxHelper __h = new ManagerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ManagerPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ManagerPrxHelper __h = new ManagerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Chat::Manager",
        "::Ice::Object"
    };

    public static String
    ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _ManagerDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _ManagerDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, ManagerPrx v)
    {
        __os.writeProxy(v);
    }

    public static ManagerPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ManagerPrxHelper result = new ManagerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
