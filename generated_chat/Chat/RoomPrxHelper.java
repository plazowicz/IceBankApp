// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `RoomPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Chat;

public final class RoomPrxHelper extends Ice.ObjectPrxHelperBase implements RoomPrx
{
    public Message[]
    getHistory()
        throws UserIsNotInRoomException
    {
        return getHistory(null, false);
    }

    public Message[]
    getHistory(java.util.Map<String, String> __ctx)
        throws UserIsNotInRoomException
    {
        return getHistory(__ctx, true);
    }

    private Message[]
    getHistory(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UserIsNotInRoomException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getHistory");
                __delBase = __getDelegate(false);
                _RoomDel __del = (_RoomDel)__delBase;
                return __del.getHistory(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getHistory_name = "getHistory";

    public Ice.AsyncResult begin_getHistory()
    {
        return begin_getHistory(null, false, null);
    }

    public Ice.AsyncResult begin_getHistory(java.util.Map<String, String> __ctx)
    {
        return begin_getHistory(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getHistory(Ice.Callback __cb)
    {
        return begin_getHistory(null, false, __cb);
    }

    public Ice.AsyncResult begin_getHistory(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getHistory(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getHistory(Callback_Room_getHistory __cb)
    {
        return begin_getHistory(null, false, __cb);
    }

    public Ice.AsyncResult begin_getHistory(java.util.Map<String, String> __ctx, Callback_Room_getHistory __cb)
    {
        return begin_getHistory(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getHistory(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getHistory_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getHistory_name, __cb);
        try
        {
            __result.__prepare(__getHistory_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Message[] end_getHistory(Ice.AsyncResult __result)
        throws UserIsNotInRoomException
    {
        Ice.AsyncResult.__check(__result, this, __getHistory_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(UserIsNotInRoomException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        Message[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = MessagesHelper.read(__is);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    join(String roomName, ClientCallbackPrx callback)
        throws RoomNotFoundException,
               UserAlreadyInRoomException
    {
        return join(roomName, callback, null, false);
    }

    public boolean
    join(String roomName, ClientCallbackPrx callback, java.util.Map<String, String> __ctx)
        throws RoomNotFoundException,
               UserAlreadyInRoomException
    {
        return join(roomName, callback, __ctx, true);
    }

    private boolean
    join(String roomName, ClientCallbackPrx callback, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RoomNotFoundException,
               UserAlreadyInRoomException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("join");
                __delBase = __getDelegate(false);
                _RoomDel __del = (_RoomDel)__delBase;
                return __del.join(roomName, callback, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __join_name = "join";

    public Ice.AsyncResult begin_join(String roomName, ClientCallbackPrx callback)
    {
        return begin_join(roomName, callback, null, false, null);
    }

    public Ice.AsyncResult begin_join(String roomName, ClientCallbackPrx callback, java.util.Map<String, String> __ctx)
    {
        return begin_join(roomName, callback, __ctx, true, null);
    }

    public Ice.AsyncResult begin_join(String roomName, ClientCallbackPrx callback, Ice.Callback __cb)
    {
        return begin_join(roomName, callback, null, false, __cb);
    }

    public Ice.AsyncResult begin_join(String roomName, ClientCallbackPrx callback, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_join(roomName, callback, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_join(String roomName, ClientCallbackPrx callback, Callback_Room_join __cb)
    {
        return begin_join(roomName, callback, null, false, __cb);
    }

    public Ice.AsyncResult begin_join(String roomName, ClientCallbackPrx callback, java.util.Map<String, String> __ctx, Callback_Room_join __cb)
    {
        return begin_join(roomName, callback, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_join(String roomName, ClientCallbackPrx callback, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__join_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __join_name, __cb);
        try
        {
            __result.__prepare(__join_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(roomName);
            ClientCallbackPrxHelper.__write(__os, callback);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_join(Ice.AsyncResult __result)
        throws RoomNotFoundException,
               UserAlreadyInRoomException
    {
        Ice.AsyncResult.__check(__result, this, __join_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(RoomNotFoundException __ex)
            {
                throw __ex;
            }
            catch(UserAlreadyInRoomException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    leave(String roomName)
        throws RoomNotFoundException,
               UserIsNotInRoomException
    {
        return leave(roomName, null, false);
    }

    public boolean
    leave(String roomName, java.util.Map<String, String> __ctx)
        throws RoomNotFoundException,
               UserIsNotInRoomException
    {
        return leave(roomName, __ctx, true);
    }

    private boolean
    leave(String roomName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RoomNotFoundException,
               UserIsNotInRoomException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("leave");
                __delBase = __getDelegate(false);
                _RoomDel __del = (_RoomDel)__delBase;
                return __del.leave(roomName, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __leave_name = "leave";

    public Ice.AsyncResult begin_leave(String roomName)
    {
        return begin_leave(roomName, null, false, null);
    }

    public Ice.AsyncResult begin_leave(String roomName, java.util.Map<String, String> __ctx)
    {
        return begin_leave(roomName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_leave(String roomName, Ice.Callback __cb)
    {
        return begin_leave(roomName, null, false, __cb);
    }

    public Ice.AsyncResult begin_leave(String roomName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_leave(roomName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_leave(String roomName, Callback_Room_leave __cb)
    {
        return begin_leave(roomName, null, false, __cb);
    }

    public Ice.AsyncResult begin_leave(String roomName, java.util.Map<String, String> __ctx, Callback_Room_leave __cb)
    {
        return begin_leave(roomName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_leave(String roomName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__leave_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __leave_name, __cb);
        try
        {
            __result.__prepare(__leave_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(roomName);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_leave(Ice.AsyncResult __result)
        throws RoomNotFoundException,
               UserIsNotInRoomException
    {
        Ice.AsyncResult.__check(__result, this, __leave_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(RoomNotFoundException __ex)
            {
                throw __ex;
            }
            catch(UserIsNotInRoomException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    send(String message)
        throws UserIsNotInRoomException
    {
        return send(message, null, false);
    }

    public boolean
    send(String message, java.util.Map<String, String> __ctx)
        throws UserIsNotInRoomException
    {
        return send(message, __ctx, true);
    }

    private boolean
    send(String message, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UserIsNotInRoomException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("send");
                __delBase = __getDelegate(false);
                _RoomDel __del = (_RoomDel)__delBase;
                return __del.send(message, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __send_name = "send";

    public Ice.AsyncResult begin_send(String message)
    {
        return begin_send(message, null, false, null);
    }

    public Ice.AsyncResult begin_send(String message, java.util.Map<String, String> __ctx)
    {
        return begin_send(message, __ctx, true, null);
    }

    public Ice.AsyncResult begin_send(String message, Ice.Callback __cb)
    {
        return begin_send(message, null, false, __cb);
    }

    public Ice.AsyncResult begin_send(String message, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_send(message, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_send(String message, Callback_Room_send __cb)
    {
        return begin_send(message, null, false, __cb);
    }

    public Ice.AsyncResult begin_send(String message, java.util.Map<String, String> __ctx, Callback_Room_send __cb)
    {
        return begin_send(message, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_send(String message, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__send_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __send_name, __cb);
        try
        {
            __result.__prepare(__send_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(message);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_send(Ice.AsyncResult __result)
        throws UserIsNotInRoomException
    {
        Ice.AsyncResult.__check(__result, this, __send_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(UserIsNotInRoomException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public static RoomPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        RoomPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (RoomPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    RoomPrxHelper __h = new RoomPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RoomPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        RoomPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (RoomPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    RoomPrxHelper __h = new RoomPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RoomPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RoomPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    RoomPrxHelper __h = new RoomPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RoomPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        RoomPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    RoomPrxHelper __h = new RoomPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RoomPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        RoomPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (RoomPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                RoomPrxHelper __h = new RoomPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static RoomPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RoomPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            RoomPrxHelper __h = new RoomPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Chat::Room",
        "::Ice::Object"
    };

    public static String
    ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _RoomDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _RoomDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, RoomPrx v)
    {
        __os.writeProxy(v);
    }

    public static RoomPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            RoomPrxHelper result = new RoomPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
