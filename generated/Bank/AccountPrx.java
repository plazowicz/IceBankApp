// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `AccountPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Bank;

public interface AccountPrx extends Ice.ObjectPrx
{
    public String login(String PESEL, String password)
        throws IncorrectPasswordException,
               UserAlreadyLoggedInException,
               UserNotExistException;

    public String login(String PESEL, String password, java.util.Map<String, String> __ctx)
        throws IncorrectPasswordException,
               UserAlreadyLoggedInException,
               UserNotExistException;

    public Ice.AsyncResult begin_login(String PESEL, String password);

    public Ice.AsyncResult begin_login(String PESEL, String password, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_login(String PESEL, String password, Ice.Callback __cb);

    public Ice.AsyncResult begin_login(String PESEL, String password, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_login(String PESEL, String password, Callback_Account_login __cb);

    public Ice.AsyncResult begin_login(String PESEL, String password, java.util.Map<String, String> __ctx, Callback_Account_login __cb);

    public String end_login(Ice.AsyncResult __result)
        throws IncorrectPasswordException,
               UserAlreadyLoggedInException,
               UserNotExistException;

    public boolean logout()
        throws UserAlreadyLoggedOutException;

    public boolean logout(java.util.Map<String, String> __ctx)
        throws UserAlreadyLoggedOutException;

    public Ice.AsyncResult begin_logout();

    public Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_logout(Ice.Callback __cb);

    public Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_logout(Callback_Account_logout __cb);

    public Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx, Callback_Account_logout __cb);

    public boolean end_logout(Ice.AsyncResult __result)
        throws UserAlreadyLoggedOutException;

    public int getState()
        throws UserNotLoggedIn;

    public int getState(java.util.Map<String, String> __ctx)
        throws UserNotLoggedIn;

    public Ice.AsyncResult begin_getState();

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getState(Ice.Callback __cb);

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getState(Callback_Account_getState __cb);

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Callback_Account_getState __cb);

    public int end_getState(Ice.AsyncResult __result)
        throws UserNotLoggedIn;

    public int withdraw(int stake)
        throws InsufficientFundsException,
               UserNotLoggedIn;

    public int withdraw(int stake, java.util.Map<String, String> __ctx)
        throws InsufficientFundsException,
               UserNotLoggedIn;

    public Ice.AsyncResult begin_withdraw(int stake);

    public Ice.AsyncResult begin_withdraw(int stake, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_withdraw(int stake, Ice.Callback __cb);

    public Ice.AsyncResult begin_withdraw(int stake, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_withdraw(int stake, Callback_Account_withdraw __cb);

    public Ice.AsyncResult begin_withdraw(int stake, java.util.Map<String, String> __ctx, Callback_Account_withdraw __cb);

    public int end_withdraw(Ice.AsyncResult __result)
        throws InsufficientFundsException,
               UserNotLoggedIn;

    public boolean deposit(int stake)
        throws UserNotLoggedIn;

    public boolean deposit(int stake, java.util.Map<String, String> __ctx)
        throws UserNotLoggedIn;

    public Ice.AsyncResult begin_deposit(int stake);

    public Ice.AsyncResult begin_deposit(int stake, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_deposit(int stake, Ice.Callback __cb);

    public Ice.AsyncResult begin_deposit(int stake, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_deposit(int stake, Callback_Account_deposit __cb);

    public Ice.AsyncResult begin_deposit(int stake, java.util.Map<String, String> __ctx, Callback_Account_deposit __cb);

    public boolean end_deposit(Ice.AsyncResult __result)
        throws UserNotLoggedIn;
}
