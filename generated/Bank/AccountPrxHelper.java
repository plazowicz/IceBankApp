// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `AccountPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Bank;

public final class AccountPrxHelper extends Ice.ObjectPrxHelperBase implements AccountPrx
{
    public boolean
    deposit(int stake)
        throws UserNotLoggedIn
    {
        return deposit(stake, null, false);
    }

    public boolean
    deposit(int stake, java.util.Map<String, String> __ctx)
        throws UserNotLoggedIn
    {
        return deposit(stake, __ctx, true);
    }

    private boolean
    deposit(int stake, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UserNotLoggedIn
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("deposit");
                __delBase = __getDelegate(false);
                _AccountDel __del = (_AccountDel)__delBase;
                return __del.deposit(stake, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __deposit_name = "deposit";

    public Ice.AsyncResult begin_deposit(int stake)
    {
        return begin_deposit(stake, null, false, null);
    }

    public Ice.AsyncResult begin_deposit(int stake, java.util.Map<String, String> __ctx)
    {
        return begin_deposit(stake, __ctx, true, null);
    }

    public Ice.AsyncResult begin_deposit(int stake, Ice.Callback __cb)
    {
        return begin_deposit(stake, null, false, __cb);
    }

    public Ice.AsyncResult begin_deposit(int stake, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deposit(stake, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_deposit(int stake, Callback_Account_deposit __cb)
    {
        return begin_deposit(stake, null, false, __cb);
    }

    public Ice.AsyncResult begin_deposit(int stake, java.util.Map<String, String> __ctx, Callback_Account_deposit __cb)
    {
        return begin_deposit(stake, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deposit(int stake, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deposit_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deposit_name, __cb);
        try
        {
            __result.__prepare(__deposit_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(stake);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_deposit(Ice.AsyncResult __result)
        throws UserNotLoggedIn
    {
        Ice.AsyncResult.__check(__result, this, __deposit_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(UserNotLoggedIn __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public int
    getState()
        throws UserNotLoggedIn
    {
        return getState(null, false);
    }

    public int
    getState(java.util.Map<String, String> __ctx)
        throws UserNotLoggedIn
    {
        return getState(__ctx, true);
    }

    private int
    getState(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UserNotLoggedIn
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getState");
                __delBase = __getDelegate(false);
                _AccountDel __del = (_AccountDel)__delBase;
                return __del.getState(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getState_name = "getState";

    public Ice.AsyncResult begin_getState()
    {
        return begin_getState(null, false, null);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx)
    {
        return begin_getState(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getState(Ice.Callback __cb)
    {
        return begin_getState(null, false, __cb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getState(Callback_Account_getState __cb)
    {
        return begin_getState(null, false, __cb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Callback_Account_getState __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getState_name, __cb);
        try
        {
            __result.__prepare(__getState_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getState(Ice.AsyncResult __result)
        throws UserNotLoggedIn
    {
        Ice.AsyncResult.__check(__result, this, __getState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(UserNotLoggedIn __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public String
    login(String PESEL, String password)
        throws IncorrectPasswordException,
               UserAlreadyLoggedInException,
               UserNotExistException
    {
        return login(PESEL, password, null, false);
    }

    public String
    login(String PESEL, String password, java.util.Map<String, String> __ctx)
        throws IncorrectPasswordException,
               UserAlreadyLoggedInException,
               UserNotExistException
    {
        return login(PESEL, password, __ctx, true);
    }

    private String
    login(String PESEL, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws IncorrectPasswordException,
               UserAlreadyLoggedInException,
               UserNotExistException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("login");
                __delBase = __getDelegate(false);
                _AccountDel __del = (_AccountDel)__delBase;
                return __del.login(PESEL, password, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __login_name = "login";

    public Ice.AsyncResult begin_login(String PESEL, String password)
    {
        return begin_login(PESEL, password, null, false, null);
    }

    public Ice.AsyncResult begin_login(String PESEL, String password, java.util.Map<String, String> __ctx)
    {
        return begin_login(PESEL, password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_login(String PESEL, String password, Ice.Callback __cb)
    {
        return begin_login(PESEL, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_login(String PESEL, String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_login(PESEL, password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_login(String PESEL, String password, Callback_Account_login __cb)
    {
        return begin_login(PESEL, password, null, false, __cb);
    }

    public Ice.AsyncResult begin_login(String PESEL, String password, java.util.Map<String, String> __ctx, Callback_Account_login __cb)
    {
        return begin_login(PESEL, password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_login(String PESEL, String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__login_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __login_name, __cb);
        try
        {
            __result.__prepare(__login_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(PESEL);
            __os.writeString(password);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_login(Ice.AsyncResult __result)
        throws IncorrectPasswordException,
               UserAlreadyLoggedInException,
               UserNotExistException
    {
        Ice.AsyncResult.__check(__result, this, __login_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(IncorrectPasswordException __ex)
            {
                throw __ex;
            }
            catch(UserAlreadyLoggedInException __ex)
            {
                throw __ex;
            }
            catch(UserNotExistException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    logout()
        throws UserAlreadyLoggedOutException
    {
        return logout(null, false);
    }

    public boolean
    logout(java.util.Map<String, String> __ctx)
        throws UserAlreadyLoggedOutException
    {
        return logout(__ctx, true);
    }

    private boolean
    logout(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws UserAlreadyLoggedOutException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("logout");
                __delBase = __getDelegate(false);
                _AccountDel __del = (_AccountDel)__delBase;
                return __del.logout(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __logout_name = "logout";

    public Ice.AsyncResult begin_logout()
    {
        return begin_logout(null, false, null);
    }

    public Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx)
    {
        return begin_logout(__ctx, true, null);
    }

    public Ice.AsyncResult begin_logout(Ice.Callback __cb)
    {
        return begin_logout(null, false, __cb);
    }

    public Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_logout(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_logout(Callback_Account_logout __cb)
    {
        return begin_logout(null, false, __cb);
    }

    public Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx, Callback_Account_logout __cb)
    {
        return begin_logout(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_logout(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__logout_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __logout_name, __cb);
        try
        {
            __result.__prepare(__logout_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_logout(Ice.AsyncResult __result)
        throws UserAlreadyLoggedOutException
    {
        Ice.AsyncResult.__check(__result, this, __logout_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(UserAlreadyLoggedOutException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public int
    withdraw(int stake)
        throws InsufficientFundsException,
               UserNotLoggedIn
    {
        return withdraw(stake, null, false);
    }

    public int
    withdraw(int stake, java.util.Map<String, String> __ctx)
        throws InsufficientFundsException,
               UserNotLoggedIn
    {
        return withdraw(stake, __ctx, true);
    }

    private int
    withdraw(int stake, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws InsufficientFundsException,
               UserNotLoggedIn
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("withdraw");
                __delBase = __getDelegate(false);
                _AccountDel __del = (_AccountDel)__delBase;
                return __del.withdraw(stake, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __withdraw_name = "withdraw";

    public Ice.AsyncResult begin_withdraw(int stake)
    {
        return begin_withdraw(stake, null, false, null);
    }

    public Ice.AsyncResult begin_withdraw(int stake, java.util.Map<String, String> __ctx)
    {
        return begin_withdraw(stake, __ctx, true, null);
    }

    public Ice.AsyncResult begin_withdraw(int stake, Ice.Callback __cb)
    {
        return begin_withdraw(stake, null, false, __cb);
    }

    public Ice.AsyncResult begin_withdraw(int stake, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_withdraw(stake, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_withdraw(int stake, Callback_Account_withdraw __cb)
    {
        return begin_withdraw(stake, null, false, __cb);
    }

    public Ice.AsyncResult begin_withdraw(int stake, java.util.Map<String, String> __ctx, Callback_Account_withdraw __cb)
    {
        return begin_withdraw(stake, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_withdraw(int stake, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__withdraw_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __withdraw_name, __cb);
        try
        {
            __result.__prepare(__withdraw_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(stake);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_withdraw(Ice.AsyncResult __result)
        throws InsufficientFundsException,
               UserNotLoggedIn
    {
        Ice.AsyncResult.__check(__result, this, __withdraw_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(InsufficientFundsException __ex)
            {
                throw __ex;
            }
            catch(UserNotLoggedIn __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public static AccountPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        AccountPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (AccountPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    AccountPrxHelper __h = new AccountPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static AccountPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        AccountPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (AccountPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    AccountPrxHelper __h = new AccountPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static AccountPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        AccountPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    AccountPrxHelper __h = new AccountPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static AccountPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        AccountPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    AccountPrxHelper __h = new AccountPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static AccountPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        AccountPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (AccountPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                AccountPrxHelper __h = new AccountPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static AccountPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        AccountPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            AccountPrxHelper __h = new AccountPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Bank::Account",
        "::Ice::Object"
    };

    public static String
    ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _AccountDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _AccountDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, AccountPrx v)
    {
        __os.writeProxy(v);
    }

    public static AccountPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            AccountPrxHelper result = new AccountPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
